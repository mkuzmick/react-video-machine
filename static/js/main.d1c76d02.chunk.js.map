{"version":3,"sources":["components/basics/LinksList.module.css","components/basics/LinksListAlt.module.css","components/demos/FetchExample.js","components/basics/LinksList.js","components/basics/LinksListAlt.js","components/vimeo-machine-replica/Layout.js","components/basics/NavigationBar.js","components/vimeo-machine-replica/Container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FetchExample","useState","hits","data","setData","query","setQuery","search","setSearch","useEffect","a","async","axios","result","fetchData","className","Jumbotron","type","value","onChange","event","target","onClick","map","item","key","objectID","href","url","title","props","styles","list","links","link","index","text","children","Styles","styled","div","Navbar","expand","fixed","Brand","Toggle","aria-controls","Collapse","id","Nav","Item","Link","path","App","Layout","NavigationBar","LinksData","style","marginTop","exact","component","VimeoMachineReplica","render","LinksList","LinksListAlt","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1c76d02.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"LinksList_list__hyqcp\",\"list-element\":\"LinksList_list-element__3G6oT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"LinksListAlt_list__1R-Qw\",\"list-element\":\"LinksListAlt_list-element__1OkIo\"};","import React,{ useState, useEffect } from 'react';\nimport axios from 'axios'\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\n\nfunction FetchExample() {\n  const [data, setData] = useState({ hits: [] });\n  const [query, setQuery] = useState('redux');\n  const [search, setSearch] = useState('redux');\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(\n        `http://hn.algolia.com/api/v1/search?query=${search}`,\n      );\n      setData(result.data);\n    };\n    fetchData();\n  }, [search]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      {/*\n        <Player id=\"test_id_007\" />\n      */}\n      <Jumbotron >\n        <p>\n          Type in a search term.\n        </p>\n        <input\n          type=\"text\"\n          value={query}\n          onChange={event => setQuery(event.target.value)}\n        />\n        <button type=\"button\" onClick={() => {setSearch(query)}}>\n          Search\n        </button>\n      </Jumbotron>\n        <ul>\n          {data.hits.map(item => (\n            <li key={item.objectID}>\n              <a href={item.url}>{item.title}</a>\n            </li>\n          ))}\n        </ul>\n      </header>\n\n    </div>\n  );\n}\n\n\nexport default FetchExample;\n","import React from 'react'\nimport styles from './LinksList.module.css'\n\nexport default(props)=>{\n  return (\n    <div className={styles.list}>\n      <h1>Links List.</h1>\n      <ul>\n        {\n          props.links.map((link, index) => {\n            return(<li className={styles[\"list-element\"]} key={index}>link to {link.text}</li>)\n          })\n        }\n      </ul>\n    </div>\n  )\n}\n","import React from 'react'\nimport styles from './LinksListAlt.module.css'\n\nexport default(props)=>{\n  return (\n    <div className={styles.list}>\n      <h1>Links List.</h1>\n      <ul>\n        {\n          props.links.map((link, index) => {\n            return(<li className={styles[\"list-element\"]} key={index}>link to {link.text}</li>)\n          })\n        }\n      </ul>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default(props)=>{\n  return (\n    <div>\n      Layout\n      {props.children}\n    </div>\n  )\n}\n","import React from 'react'\nimport { Nav, Navbar } from 'react-bootstrap'\nimport styled from 'styled-components'\n\nconst Styles = styled.div`\n  .navbar {\n    background-color: rgba(50, 20, 70, 0.95);\n  }\n\n  .navbar-brand, .navbar-nav .nav-link {\n    color: #bbb;\n\n    &:hover {\n      color: white;\n    }\n  }\n`;\n\nexport default(props)=>{\n  return (\n    <Styles>\n      <Navbar expand=\"lg\" fixed=\"top\">\n        <Navbar.Brand href=\"/\">reactLab</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"ml-auto\">\n            <Nav.Item><Nav.Link href=\"/\">Home</Nav.Link></Nav.Item>\n            {\n              props.links.map((link, index) => {\n                return(<Nav.Item key={index}><Nav.Link href={link.path}>{link.text}</Nav.Link></Nav.Item>)\n              })\n            }\n        </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <div>\n        <ul>\n\n        </ul>\n      </div>\n    </Styles>\n  )\n}\n","import React from 'react'\n\nexport default (props) => {\n  return(\n    <div>\n        <h3>Vimeo Machine Replica goes here.</h3>\n    </div>\n  )\n}\n","import React,{ useState, useEffect } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport FetchExample from './components/demos/FetchExample';\nimport LinksList from './components/basics/LinksList';\nimport LinksListAlt from './components/basics/LinksListAlt';\nimport Layout from './components/vimeo-machine-replica/Layout';\nimport LinksData from './data/LinksData';\nimport NavigationBar from './components/basics/NavigationBar';\nimport VimeoMachineReplica from \"./components/vimeo-machine-replica/Container\";\n\nfunction App() {\n  const Home = (props) => {\n    return (\n      <div>\n        <h1>home.</h1>\n      </div>\n    )\n  }\n  return (\n    <div className=\"App\">\n      <Layout>\n        <NavigationBar links={ LinksData } />\n        <div style={{marginTop:\"30px\"}}>\n          <Router>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route path=\"/vimeo-machine-replica\" component={VimeoMachineReplica} />\n              <Route path=\"/fetch-example\" render={() => {return (<FetchExample />)}  } />\n              <Route path=\"/links-list\" render={ (props) => { return (<LinksList links={LinksData}/>) } } />\n              <Route path=\"/links-list-alt\" render={ (props) => { return (<LinksListAlt links={LinksData}/>) } } />\n            </Switch>\n          </Router>\n        </div>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}